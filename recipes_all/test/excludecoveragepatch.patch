--- cover.py	2009-06-27 12:27:21.000000000 +0100
+++ cover-patched.py	2009-06-27 12:28:33.000000000 +0100
@@ -69,6 +69,16 @@
                           dest="cover_packages",
                           help="Restrict coverage output to selected packages "
                           "[NOSE_COVER_PACKAGE]")
+        parser.add_option("--cover-exclude-package", action="append",
+                          default=env.get('NOSE_COVER_EXCLUDE'),
+                          dest="exclude_packages",
+                          help="Exclude coverage of selected packages "
+                          "[NOSE_COVER_EXCLUDE_PACKAGE]")
+        parser.add_option("--cover-exclude-file", action="append",
+                          default=env.get('NOSE_COVER_EXCLUDE'),
+                          dest="exclude_files",
+                          help="Exclude coverage of selected files "
+                          "[NOSE_COVER_EXCLUDE_FILE]") 
         parser.add_option("--cover-erase", action="store_true",
                           default=env.get('NOSE_COVER_ERASE'),
                           dest="cover_erase",
@@ -118,13 +128,27 @@
         self.coverErase = options.cover_erase
         self.coverTests = options.cover_tests
         self.coverPackages = []
+        self.excludePackages = []
+        self.excludeFiles = []
         if options.cover_packages:
             for pkgs in [tolist(x) for x in options.cover_packages]:
                 self.coverPackages.extend(pkgs)
+        if options.exclude_packages:
+            for pkgs in [tolist(x) for x in options.exclude_packages]:
+                self.excludePackages.extend(pkgs)
+        if options.exclude_files:
+            for filename in [tolist(x) for x in options.exclude_files]:
+                self.excludeFiles.extend(filename)
         self.coverInclusive = options.cover_inclusive
         if self.coverPackages:
             log.info("Coverage report will include only packages: %s",
                      self.coverPackages)
+        if self.excludePackages:
+            log.info("Coverage report will exclude packages: %s",
+                     self.excludePackages)
+        if self.excludeFiles:
+            log.info("Coverage report will exclude files: %s",
+                     self.excludeFiles)
         self.coverHtmlDir = None
         if options.cover_html:
             self.coverHtmlDir = options.cover_html_dir
@@ -255,6 +279,12 @@
         if not module_file or not module_file.endswith('.py'):
             log.debug("no coverage of %s: not a python file", name)
             return False
+        if self.excludePackages:
+            for package in self.excludePackages:
+                if name.startswith(package):
+                    log.debug("no coverage for %s: module excluded",
+                              name)
+                    return False
         if self.coverPackages:
             for package in self.coverPackages:
                 if (name.startswith(package)
@@ -280,6 +310,8 @@
         """
         if self.coverInclusive:
             if file.endswith(".py"):
+                if file in self.excludeFiles:
+                    return False
                 if package and self.coverPackages:
                     for want in self.coverPackages:
                         if package.startswith(want):
